#! /bin/bash

# checks if previous step resulted in error or it is a grid scan and exits
if [ -e error.log ] || [ -e GRID_SCAN ]; then
	exit
fi

inpfile=`wc -l XDS.INP | cut -c 1-3`
head -n $inpfile XDS.INP > XDS.INP.004
sed -i '/TRUSTED_REGION= /d' XDS.INP.004
sed -i '/JOB= /d' XDS.INP.004
echo "JOB= DEFPIX INTEGRATE" >> XDS.INP.004
cp XDS.INP.004 XDS.INP


# runs INTEGRATE step of XDS

echo -e "\
\n### INTEGRATION ###\n"

echo -e "Frame Range   Strong  Reject    Scale   Mosaic  Divergence    %Accepted"  
echo -e "-----------------------------------------------------------------------"

xds_par | awk '\
/ACCEPTED/||/UNABLE/ {
	printf "%3d -	%3d	%4d	%4d	%2.3f	%2.3f	  %2.4f", x, y, int(tot/nb), int(tot2/nb), tot3/nb, tot5/nb, tot4/nb}
/IMAGE/{
getline;tot=nb=0;tot1=nb=0;tot2=nb=0;tot3=nb=0;tot4=nb=0;tot5=nb=0;x=$1}
$7>0 {
tot+=$7;tot1+=$5;tot2+=$8;tot3+=$3;tot4+=$9;tot5+=$10;nb++}
NF {
y=$1
}
/REFLECTIONS ACCEPTED FOR REFINEMENT/ {
	printf "	%3.1f\n", (100*$1)/$4
}
/UNABLE TO CARRY OUT REFINEMENT/ {
    	printf "	0\n"
}
'


if [ -e INTEGRATE.LP ]; then
	finish_check=`awk '/wall-clock/ { printf "%s", $1 }' INTEGRATE.LP`
fi

#what this does is attempt to repeat integration 'n' attempts, each time 
#truncating total number of images to process by 10% of the total images
total_attempts=5 
attempt=0
while [ ! -e INTEGRATE.HKL ]; do
	attempt=$((attempt+1))
	echo -e "\n		*** Integration failed. ***\n"
	rangestart=`awk '/DATA_RANGE/ {print $2}' XDS.INP`
	start=`echo $rangestart | bc`
	rangeend=`awk '/DATA_RANGE/ {print $3}' XDS.INP`
	fraction_removed=`echo "$rangeend*0.1" | bc | xargs printf "%1.0f"`
	newrangeend=`echo "$rangeend-$fraction_removed" | bc | xargs printf "%1.0f"`
	if [[ "$start" -eq "$newrangeend" ]]  || [[ "$attempt" -eq "6" ]] ; then
	    echo "Repeated integration attempts have failed." 
	    break
	fi
	sed -i '/DATA_RANGE= /d' XDS.INP
	echo "DATA_RANGE= $rangestart $newrangeend" >> XDS.INP
	echo -e "Will now try integration again with less images.\n"
	echo -e "Repeat attempt $attempt/$total_attempts. New image range: $start - $newrangeend\n"
	echo -e "\
\n### INTEGRATION ###\n"

	echo -e "Frame Range   Strong  Reject    Scale   Mosaic  Divergence    %Accepted"  
	echo -e "-----------------------------------------------------------------------"

	xds_par | awk '\
/ACCEPTED/||/UNABLE/ {
	printf "%3d -	%3d	%4d	%4d	%2.3f	%2.3f	  %2.4f", x, y, int(tot/nb), int(tot2/nb), tot3/nb, tot5/nb, tot4/nb}
/IMAGE/{
getline;tot=nb=0;tot1=nb=0;tot2=nb=0;tot3=nb=0;tot4=nb=0;tot5=nb=0;x=$1}
$7>0 {
tot+=$7;tot1+=$5;tot2+=$8;tot3+=$3;tot4+=$9;tot5+=$10;nb++}
NF {
y=$1
}
/REFLECTIONS ACCEPTED FOR REFINEMENT/ {
	printf "	%3.1f\n", (100*$1)/$4
}
/UNABLE TO CARRY OUT REFINEMENT/ {
    	printf "	0\n"
}
'
done

# This checks for errors during the integration step and stops the script, if errors found

if [ ! -e INTEGRATE.LP ] || [ ! -e DEFPIX.LP ]; then
	echo -e "\n***********************************************************************"
	echo -e "*** XDS encountered a serious error during integration and stopped! ***"
	echo -e "***********************************************************************\n"
	if [ -e LP_01.tmp ]; then
		cat LP_01.tmp > error.log
		exit
	else
		echo "Integration attempts failed." > error.log
		exit	
	fi	
	exit
fi


checkerror=`awk '/!!! ERROR/' INTEGRATE.LP`
checkerror1=`awk '/!!! ERROR/' DEFPIX.LP`

if [[ "$checkerror" ]]; then
    echo -e "\n***********************************************************************"
    echo -e "*** XDS encountered a serious error during integration and stopped! ***"
    echo -e "***********************************************************************\n"
    echo -e "$checkerror\n"
	cat INTEGRATE.LP > error.log
	exit
elif [[ "$checkerror1" ]]; then
    echo -e "\n***********************************************************************"
    echo -e "*** XDS encountered a serious error during integration and stopped! ***"
    echo -e "***********************************************************************\n"
    echo -e "$checkerror\n"
	cat DEFPIX.LP > error.log
	exit
fi

totalintensities=`awk '/REFLECTIONS SAVED/ {printf "\nIntegrated intensities:		%3d\n", $1}' INTEGRATE.LP`
echo -e "$totalintensities"
divergence=`awk '/BEAM_DIVERGENCE_E.S.D.=/ {printf "Beam divergence (deg):		%3.3f\n", $4}' INTEGRATE.LP | tail -1`
echo -e "$divergence"
mosaicity=`awk '/SUGGESTED/,/REFLECTING_RANGE_E.S.D.=/ {printf "Mosaicity (deg):  		%3.3f\n", $4}' INTEGRATE.LP | tail -1`
echo -e "$mosaicity"

# running correct

rm -rf XDS_ASCII.HKL
rm -rf CORRECT.LP
rm -rf POINTLESS.LP
rm -rf XDS.INP.005
rm -rf XDS.INP.006

# checks if previous step resulted in error or it is a grid scan and exits
if [ -e error.log ] || [ -e GRID_SCAN ]; then
	exit
fi

# extracts basic info and waits for the integration step to finish

xtal=`awk '/Project/ { printf "%s", $4}' DATASET_PARAMS.LP`

inpfile=`wc -l XDS.INP | cut -c 1-3`
head -n $inpfile XDS.INP > XDS.INP.005

sed -i '/SPACE_GROUP_NUMBER=/d' XDS.INP.005
sed -i '/UNIT_CELL_CONSTANTS=/d' XDS.INP.005

while [ 1 ]
do
    PID=$(ls | grep "INTEGRATE.HKL" | awk '{print $1}')
    [ ! -n "$PID" ] && sleep 1 || break
done

# if symmetry has been provided then pointless simply converts INTEGRATE.HKL


if [ -e symm_def ]; then
    # if symmetry has been provided then runs CORRECT
    spacegroupnum=`awk '/SPACE_GROUP_NUMBER=/ { print $2 }' INTEGRATE.LP`
    cell=`awk '/UNIT_CELL_CONSTANTS=/ { print $2, $3, $4, $5, $6, $7 }' INTEGRATE.LP`
    echo "SPACE_GROUP_NUMBER=$spacegroupnum" >> XDS.INP.005
    echo "UNIT_CELL_CONSTANTS=$cell" >> XDS.INP.005
    sed -i '/JOB= /d' XDS.INP.005
    echo "JOB= CORRECT" >> XDS.INP.005
    cp XDS.INP.005 XDS.INP
    xds_par > /dev/null &

    while [ 1 ]; do
        PID=$(ls | grep "CORRECT.LP" | awk '{print $1}')
        [ ! -n "$PID" ] && sleep 1 || break
    done

    # This checks for errors during the scaling step and stops the script, if errors found
    while [ CORRECT.tmp ]; do
        checkerror=`awk '/!!! ERROR/' CORRECT.LP`
        if [[ "$checkerror" ]]; then
            echo -e "\n*******************************************************************"
            echo -e "*** XDS encountered a serious error during scaling and stopped! ***"
            echo -e "*******************************************************************\n"
            echo -e "$checkerror\n"
            cat CORRECT.LP > error.log
            break
        fi
        PID=$(ls | grep "CORRECT.tmp" | awk '{print $1}')
        [ -n "$PID" ] && sleep 1 || break
    done

    # This waits for CORRECT to produce XDS_ASCII.HKL
    while [ 1 ]; do
        PID=$(ls | grep "XDS_ASCII.HKL" | awk '{print $1}')
        [ ! -n "$PID" ] && sleep 1 || break
    done

    # This runs Pointless to simply convert XDS_ASCII.HKL to an MTZ file
    pointless -copy xdsin XDS_ASCII.HKL hklout $xtal.indexed.mtz > POINTLESS.LP 2>/dev/null

    while [ 1 ]; do
        PID=$(ls | grep "POINTLESS.LP" | awk '{print $1}')
        [ ! -n "$PID" ] && sleep 1 || break
    done
else
    # if symmetry has been not been provided then runs Pointless to analyse the data without outputting an MTZ
    pointless xdsin INTEGRATE.HKL > POINTLESS.LP 2>/dev/null
    while [ 1 ]; do
        PID=$(ls | grep "POINTLESS.LP" | awk '{print $1}')
        [ ! -n "$PID" ] && sleep 1 || break
    done
fi

#spacegroup=`awk -F '[(|)]' '/ * Space group = / { print $1 }' POINTLESS.LP | awk -F\' '{print $2}'`
newcell=`awk '/Unit cell:/ {print $3, $4, $5, $6, $7, $8}' POINTLESS.LP`
#newcell=`awk '/Unit cell:/ {printf "%3.1f %3.1f %3.1f %3.1f %3.1f %3.1f\n",$3,$4,$5,$6,$7,$8}' POINTLESS.LP`
spacegroupnum=`awk '/TotProb/&&/SysAbsProb/ {getline;getline;split($0,a,"(");split(a[2],b,")");printf "%3d",b[1] }' POINTLESS.LP`
#sysabsprob=`awk '/TotProb/&&/SysAbsProb/ {getline;getline;split($0,a,"(");split(a[2],b," ");print b[2] }' POINTLESS.LP`
#laueprob=`awk '/Laue group probability:/ {printf "%4.3f",$4}' POINTLESS.LP`
#spacegroupprob=`awk '/Space group confidence:/ {printf "%4.3f",$4}' POINTLESS.LP`
#reindexop=`awk '/Reindexing operator/ { print $3}' POINTLESS.LP | sed 's/\[//g;s/\]//g'`
#realspacetransform=`awk '/Real space transformation/ { print $4}' POINTLESS.LP | sed 's/(//g;s/)//g'`

pointless_analysis=`sed -n '/Best Solution:/,/Unit/p' POINTLESS.LP`

spacegroup=`echo "$pointless_analysis" | awk '/space group/' | awk 'BEGIN {FS="p "}; { print $2 }'`
newcell=`echo "$pointless_analysis" | awk '/Unit cell:/ { printf "%3.1f, %3.1f, %3.1f, %3.1f, %3.1f, %3.1f", $3, $4, $5, $6, $7, $8 }'`
spacegroupnum=`awk '/TotProb/&&/SysAbsProb/ {getline;getline;split($0,a,"(");split(a[2],b,")");printf "%3d",b[1] }' POINTLESS.LP`
reindexop=`echo "$pointless_analysis" | awk '/Reindex operator/ { print $3}' | sed 's/\[//g;s/\]//g'`
laueprob=`echo "$pointless_analysis" | awk '/Laue group probability:/ {printf "%4.3f",$4}'`
spacegroupprob=`echo "$pointless_analysis" | awk '/Space group confidence:/ {printf "%4.3f",$4}'`

if [ ! -e symm_def ]; then
	echo -e "\
\n### SYMMETRY ANALYSIS ###\n
Space group:                    $spacegroup (# $spacegroupnum)
Unit cell:                      $newcell
Laue group confidence:          $laueprob
Space group confidence:         $spacegroupprob
Reindexing operator:            $reindexop"
fi

# if symmetry has been not been provided then uses information from Pointless to run CORRECT
if [ ! -e symm_def ]; then
    inpfile=`wc -l XDS.INP | cut -c 1-3`
    head -n $inpfile XDS.INP > XDS.INP.006
    sed -i '/SPACE_GROUP_NUMBER=/d' XDS.INP.006
    sed -i '/UNIT_CELL_CONSTANTS=/d' XDS.INP.006
    sed -i '/JOB= /d' XDS.INP.006
    echo "SPACE_GROUP_NUMBER=$spacegroupnum" >> XDS.INP.006
    echo "UNIT_CELL_CONSTANTS=$newcell" >> XDS.INP.006
    echo "JOB= CORRECT" >> XDS.INP.006
    cp XDS.INP.006 XDS.INP
    xds_par > /dev/null &
fi

while [ 1 ]; do
    PID=$(ls | grep "CORRECT.LP" | awk '{print $1}')
    [ ! -n "$PID" ] && sleep 1 || break
done

# This checks for errors during the scaling step and stops the script, if errors found
while [ CORRECT.tmp ]; do
    checkerror=`awk '/!!! ERROR/' CORRECT.LP`
    if [[ "$checkerror" ]]; then
        echo -e "\n*******************************************************************"
        echo -e "*** XDS encountered a serious error during scaling and stopped! ***"
        echo -e "*******************************************************************\n"
        echo -e "$checkerror\n"
        cat CORRECT.LP > error.log
        break
    fi
    PID=$(ls | grep "CORRECT.tmp" | awk '{print $1}')
    [ -n "$PID" ] && sleep 1 || break
done

if [ -e error.log ]; then
	exit
elif [ ! -e error.log ]; then
	while [ 1 ]; do
   		PID=$(ls | grep "XDS_ASCII.HKL" | awk '{print $1}')
    		[ ! -n "$PID" ] && sleep 1 || break
	done
fi

# This runs Pointless to simply convert XDS_ASCII.HKL to an MTZ file
pointless -copy xdsin XDS_ASCII.HKL hklout $xtal.indexed.mtz > POINTLESS.LP 2>/dev/null

while [ 1 ]; do
    PID=$(ls | grep "POINTLESS.LP" | awk '{print $1}')
    [ ! -n "$PID" ] && sleep 1 || break
done

totaldataframes=`awk '/STATISTICS OF SAVED DATA SET/ {printf "%1d - %1d\n", $8, $9}' CORRECT.LP`
refinedcell=`grep "UNIT_CELL_CONSTANTS" CORRECT.LP | tail -1 | awk '/[0-9]+$/ {printf "%4.1f %4.1f %4.1f %4.1f %4.1f %4.1f\n", $2, $3, $4, $5, $6, $7}'`
aaxis=`grep "UNIT_CELL_CONSTANTS" CORRECT.LP | tail -1 | awk '/[0-9]+$/ {printf "%4.1f\n", $2}'`
baxis=`grep "UNIT_CELL_CONSTANTS" CORRECT.LP | tail -1 | awk '/[0-9]+$/ {printf "%4.1f\n", $3}'`
caxis=`grep "UNIT_CELL_CONSTANTS" CORRECT.LP | tail -1 | awk '/[0-9]+$/ {printf "%4.1f\n", $4}'`
alpha=`grep "UNIT_CELL_CONSTANTS" CORRECT.LP | tail -1 | awk '/[0-9]+$/ {printf "%4.1f\n", $5}'`
beta=`grep "UNIT_CELL_CONSTANTS" CORRECT.LP | tail -1 | awk '/[0-9]+$/ {printf "%4.1f\n", $6}'`
gamma=`grep "UNIT_CELL_CONSTANTS" CORRECT.LP | tail -1 | awk '/[0-9]+$/ {printf "%4.1f\n", $7}'`
spacegroupnum=`grep "SPACE_GROUP_NUMBER=" CORRECT.LP | tail -1 | awk '/[0-9]+$/ {printf "%s\n", $2}'`
spacegroup=`awk -v s=$spacegroupnum 's {gsub(/\[|\]/,"");for (i=1; i<=NF; i++) {split($i,a,","); if (a[1]==s) printf "%s", a[2]}}' CORRECT.LP | sed 's/(//g;s/)//g'`

#check for rhombohedral/hexagonal setting in space groups 146 and 155 and print the PDB standard
if [ $spacegroupnum == "146" ] && [ $alpha == "$beta" ] && [ $alpha == "$gamma" ]; then
	spacegroup=R3
elif [ $spacegroupnum == "155" ] && [ $alpha == "$beta" ] && [ $alpha == "$gamma" ]; then
	spacegroup=R32
elif [ $spacegroupnum == "146" ] && [ ! $alpha == "$gamma" ]; then
	spacegroup=H3
elif [ $spacegroupnum == "155" ] && [ ! $alpha == "$gamma" ]; then
	spacegroup=H32
fi

##spacegroup=` sed -n '/\[155,/ s/.*155,\([^]]*\)].*/\1/p' XSCALE.LP`
loreslimit=`grep -B 5 "SUMMARY OF DATA SET STATISTICS FOR VARIOUS SUBSETS" CORRECT.LP | head -1 | awk '/[0-9]+$/ {printf "%4.2f", $1}'`
hireslimit=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | tail -2 | head -1 | awk '{print $1}'`
outshellhigh=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep -B 2 "total" | head -2 | tail -1 | awk '/[0-9]+$/ {printf "%4.2f\n", $1}'`
outshelllow=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep -B 2 "total" | head -1 | tail -1 | awk '/[0-9]+$/ {printf "%4.2f\n", $1}'`
completenesstotal=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep "total" | tail -1 | awk '/[0-9]+$/ {printf "%s\n", $5}'`
completenessouter=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep -B 1 "total" | head -1 | awk '/[0-9]+$/ {printf "%s\n", $5}'`	
isigmatotal=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep "total" | tail -1 | awk '/[0-9]+$/ {printf "%3.1f\n", $9}'`
isigmaouter=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep -B 1 "total" | head -1 | awk '/[0-9]+$/ {printf "%3.1f\n", $9}'`
rmeastotal=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep "total" | tail -1 | awk '/[0-9]+$/ {printf "%s\n", $10}'`
rmeasouter=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep -B 1 "total" | head -1 | awk '/[0-9]+$/ {printf "%s\n", $11}'`
rmrgdftotal=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep "total" | tail -1 | awk '/[0-9]+$/ {printf "%s\n", $11}'`
rmrgdfouter=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep -B 1 "total" | head -1 | awk '/[0-9]+$/ {printf "%s\n", $11}'`
wilsonbfactor=`awk '/WILSON LINE/ {printf "%3.1f\n", $10}' CORRECT.LP`
comparedtotal=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep "total" | tail -1 | awk '/[0-9]+$/ {printf "%s\n", $8}'`
comparedouter=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep -B 1 "total" | head -1 | awk '/[0-9]+$/ {printf "%s\n", $8}'`
acceptedrefs=`awk /SAVED/,/WILSON/ CORRECT.LP | awk '/NUMBER OF ACCEPTED OBSERVATIONS/ {printf "%s\n", $5}'`
measuredrefs=`awk /SAVED/,/WILSON/ CORRECT.LP | awk '/NUMBER OF REFLECTIONS IN SELECTED SUBSET OF IMAGES/ {printf "%s\n", $9}'`
uniquerefs=`awk /SAVED/,/WILSON/ CORRECT.LP | awk '/NUMBER OF UNIQUE ACCEPTED REFLECTIONS/ {printf "%s\n", $6}'`
rejectedrefs=`awk /SAVED/,/WILSON/ CORRECT.LP | awk '/NUMBER OF REJECTED MISFITS/ {printf "%s\n", $5}'`
siganototal=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep "total" | tail -1 | awk '/[0-9]+$/ {printf "%3.2f\n", $13}'`
siganoouter=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep -B 1 "total" | head -1 | awk '/[0-9]+$/ {printf "%3.2f\n", $13}'`
anomcorrtotal=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep "total" | tail -1 | awk '/[0-9]+$/ {printf "%s\n", $12}'`
anomcorrouter=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep -B 1 "total" | head -1 | awk '/[0-9]+$/ {printf "%s\n", $12}'`
anompairstotal=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep "total" | tail -1 | awk '/[0-9]+$/ {printf "%s\n", $14}'`
anompairsouter=`awk '/ STATISTICS OF SAVED DATA SET/,/total/' CORRECT.LP | grep -B 1 "total" | head -1 | awk '/[0-9]+$/ {printf "%s\n", $14}'`
multiplicity=$(echo "scale=1;$measuredrefs / $uniquerefs"|bc)
isa=`cat CORRECT.LP | awk '/     a        b          ISa/ {getline; printf "%s", $3}'`

echo -e "\
\n### INTEGRATION STATISTICS ###\n
Image range processed:		$totaldataframes
ISa quality statistic:		$isa
Measured intensities:		$measuredrefs
Accepted intensities:		$acceptedrefs
Compared intensities:		$comparedtotal ($comparedouter)
Unique intensities:		$uniquerefs
Rejected intensities:		$rejectedrefs\n"

if [[ $anom == "yes" ]]; then
	echo -e "\
Mean anom difference:		$siganototal ($siganoouter)
Mean anom correlation:		$anomcorrtotal ($anomcorrouter)
Friedel pairs:			$anompairstotal ($anompairsouter)\n"
fi

echo -e "Reso	Compl	R-fact	I/SigI	R-meas	CC(1/2)	AnoCorr	SigAno"  
echo -e "--------------------------------------------------------------"


correct_stats=`awk '/STATISTICS OF SAVED DATA SET/,/WILSON/' CORRECT.LP | grep -B 12 "total" | awk '/%/ { printf "%s	%s	%s	%s	%s	%s	%s	%s\n", $1,$5,$6,$9,$10,$11,$12,$13 }'`

echo -e "\
$correct_stats\n"

# This scans the fourth column of the table for values greater than 1.5 and the prints out the matching value in first column (resolution)

resolution_estimate=`echo "$correct_stats" | sed '/total/d' | awk '$4>0&&$4>1.5 {printf "%s \n", $1}' | awk '{printf "%s,", $1}' | awk '{n=split($0,a,","); print a[n-1]}'`

# resolution_estimate=`echo ONLYMERGE | aimless hklin $xtal.indexed.mtz | awk '/Estimates of resolution limits: overall/,/from Mn/' | awk '/Mn/ {printf "%s", $7}' | sed "s/A//g"`

if [ ! "$resolution_estimate" ]; then
	echo -e "Could not determine resolution estimate of the data."
	echo -e "Most likely data is too weak. Stopping integration attempts."
	cat CORRECT.LP > error.log
	exit
else
	echo -e "\nResolution estimate based on I/SigI > 1.5:	$resolution_estimate A\n"
fi

# This recycles the refined geometry parameters (from CORRECT) into INTEGRATE, which sometimes leads to better R-factors. It also results in the spacegroup's restraints on the unit cell parameters being used for the prediction of spot positions; these are therefore slightly more accurate. 

cp GXPARM.XDS XPARM.XDS


new_beam_divergence=`awk '/BEAM_DIVERGENCE=/,/E.S.D./ {printf "%s %s %s %s", $1, $2, $3, $4}' INTEGRATE.LP`
new_reflecting_range=`awk '/REFLECTING_RANGE=/,/E.S.D./ {printf "%s %s %s %s", $1, $2, $3, $4}' INTEGRATE.LP`


inpfile=`wc -l XDS.INP | cut -c 1-3`
head -n $inpfile XDS.INP > XDS.INP.007
sed -i '/SPACE_GROUP_NUMBER=/d' XDS.INP.007
sed -i '/UNIT_CELL_CONSTANTS=/d' XDS.INP.007
sed -i '/JOB= /d' XDS.INP.007
echo "SPACE_GROUP_NUMBER=$spacegroupnum" >> XDS.INP.007
echo "UNIT_CELL_CONSTANTS=$refinedcell" >> XDS.INP.007
echo "INCLUDE_RESOLUTION_RANGE= 50 $resolution_estimate" >> XDS.INP.007
echo "JOB= INTEGRATE" >> XDS.INP.007
echo "NUMBER_OF_PROFILE_GRID_POINTS_ALONG_GAMMA= 13" >> XDS.INP.007
sed -i '/BEAM_DIVERGENCE_E.S.D.=/d' XDS.INP.007
sed -i '/REFLECTING_RANGE_E.S.D.=/d' XDS.INP.007
echo "$new_beam_divergence" >> XDS.INP.007
echo "$new_reflecting_range" >> XDS.INP.007

cp XDS.INP.007 XDS.INP


# re-runs INTEGRATE step of XDS with optimised parameters

rm -rf XDS_ASCII.HKL
rm -rf CORRECT.LP
rm -rf POINTLESS.LP


echo -e "Repeating integration with optimised parameters."

echo -e "\
\n### INTEGRATION ###\n"

echo -e "Frame Range   Strong  Reject    Scale   Mosaic  Divergence    %Accepted"  
echo -e "-----------------------------------------------------------------------"

xds_par | awk '\
/ACCEPTED/||/UNABLE/ {
	printf "%3d -	%3d	%4d	%4d	%2.3f	%2.3f	  %2.4f", x, y, int(tot/nb), int(tot2/nb), tot3/nb, tot5/nb, tot4/nb}
/IMAGE/{
getline;tot=nb=0;tot1=nb=0;tot2=nb=0;tot3=nb=0;tot4=nb=0;tot5=nb=0;x=$1}
$7>0 {
tot+=$7;tot1+=$5;tot2+=$8;tot3+=$3;tot4+=$9;tot5+=$10;nb++}
NF {
y=$1
}
/REFLECTIONS ACCEPTED FOR REFINEMENT/ {
	printf "	%3.1f\n", (100*$1)/$4
}
/UNABLE TO CARRY OUT REFINEMENT/ {
    	printf "	0\n"
}
'
while [ 1 ]
do
    PID=$(ls | grep "INTEGRATE.HKL" | awk '{print $1}')
    [ ! -n "$PID" ] && sleep 1 || break
done

inpfile=`wc -l XDS.INP | cut -c 1-3`
head -n $inpfile XDS.INP > XDS.INP.008
sed -i '/JOB= /d' XDS.INP.008
echo "JOB= CORRECT" >> XDS.INP.008

cp XDS.INP.008 XDS.INP
xds_par > /dev/null &

while [ 1 ]; do
    PID=$(ls | grep "CORRECT.LP" | awk '{print $1}')
    [ ! -n "$PID" ] && sleep 1 || break
done

# This checks for errors during the scaling step and stops the script, if errors found
while [ CORRECT.tmp ]; do
    checkerror=`awk '/!!! ERROR/' CORRECT.LP`
    if [[ "$checkerror" ]]; then
        echo -e "\n*******************************************************************"
        echo -e "*** XDS encountered a serious error during scaling and stopped! ***"
        echo -e "*******************************************************************\n"
        echo -e "$checkerror\n"
        cat CORRECT.LP > error.log
        break
    fi
    PID=$(ls | grep "CORRECT.tmp" | awk '{print $1}')
    [ -n "$PID" ] && sleep 1 || break
done

if [ -e error.log ]; then
	exit
elif [ ! -e error.log ]; then
	while [ 1 ]; do
   		PID=$(ls | grep "XDS_ASCII.HKL" | awk '{print $1}')
    		[ ! -n "$PID" ] && sleep 1 || break
	done
fi

echo -e "\
\n### NEW INTEGRATION STATISTICS ###\n
Image range processed:		$totaldataframes
ISa quality statistic:		$isa
Measured intensities:		$measuredrefs
Accepted intensities:		$acceptedrefs
Compared intensities:		$comparedtotal ($comparedouter)
Unique intensities:		$uniquerefs
Rejected intensities:		$rejectedrefs\n"

if [[ $anom == "yes" ]]; then
	echo -e "\
Mean anom difference:		$siganototal ($siganoouter)
Mean anom correlation:		$anomcorrtotal ($anomcorrouter)
Friedel pairs:			$anompairstotal ($anompairsouter)\n"
fi

while [ 1 ]; do
    PID=$(ls | grep "CORRECT.LP" | awk '{print $1}')
    [ ! -n "$PID" ] && sleep 1 || break
done

correct_stats=`awk '/STATISTICS OF SAVED DATA SET/,/WILSON/' CORRECT.LP | grep -B 12 "total" | awk '/%/ { printf "%s	%s	%s	%s	%s	%s	%s	%s\n", $1,$5,$6,$9,$10,$11,$12,$13 }'`

echo -e "Reso	Compl	R-fact	I/SigI	R-meas	CC(1/2)	AnoCorr	SigAno"  
echo -e "--------------------------------------------------------------"

echo -e "\
$correct_stats\n"

resolution_estimate=`echo "$correct_stats" | sed '/total/d' | awk '$4>0&&$4>1.5 {printf "%s \n", $1}' | awk '{printf "%s,", $1}' | awk '{n=split($0,a,","); print a[n-1]}'`
isigi=`echo "$correct_stats" | sed '/total/d' | awk '$4>0&&$4>1.5 {printf "%s \n", $4}' | awk '{printf "%s,", $1}' | awk '{n=split($0,a,","); print a[n-1]}'`

# if [ $(echo "$isigi => 2" | bc) ]; then
isigi_check_1=`echo "$isigi >= 2" | bc`
until [ "$isigi_check_1" = "0" ]; do
	isigi_check_2=`echo "$isigi <= 1.5" | bc`
	new_resolution=`echo "$resolution_estimate-0.5" | bc -l`
	if [ "$isigi_check_2" = "1" ]; then
		resolution_estimate=`echo "$correct_stats" | sed '/total/d' | awk '$4>0&&$4>1.5 {printf "%s \n", $1}' | awk '{printf "%s,", $1}' | awk '{n=split($0,a,","); print a[n-1]}'`
		isigi=`echo "$correct_stats" | sed '/total/d' | awk '$4>0&&$4>1.5 {printf "%s \n", $4}' | awk '{printf "%s,", $1}' | awk '{n=split($0,a,","); print a[n-1]}'`
		echo -e "Resolution estimate is $resolution_estimate with I/SigI of $isigi in the outer shell."
		break 
	fi
	# echo -e "The value of I/SigI in outer shell is $isigi, which is still too high.\n"
	echo -e "The new resolution limit of $new_resolution will now be tested."
	inpfile=`wc -l XDS.INP | cut -c 1-3`
	head -n $inpfile XDS.INP > XDS.INP.008
	sed -i '/JOB= /d' XDS.INP.008
	sed -i '/INCLUDE_RESOLUTION_RANGE=/d' XDS.INP.008
	echo "INCLUDE_RESOLUTION_RANGE= 50 $new_resolution" >> XDS.INP.008
	echo "JOB= INTEGRATE" >> XDS.INP.008
	cp XDS.INP.008 XDS.INP

	# re-runs INTEGRATE step of XDS with new parameters
	rm -rf XDS_ASCII.HKL
	rm -rf CORRECT.LP
	rm -rf POINTLESS.LP
	echo -e "Repeating integration with resolution limit of $new_resolution A."
	echo -e "\
\n### INTEGRATION ###\n"

	echo -e "Frame Range   Strong  Reject    Scale   Mosaic  Divergence    %Accepted"  
	echo -e "-----------------------------------------------------------------------"

	xds_par | awk '\
/ACCEPTED/||/UNABLE/ {
	printf "%3d -	%3d	%4d	%4d	%2.3f	%2.3f	  %2.4f", x, y, int(tot/nb), int(tot2/nb), tot3/nb, tot5/nb, tot4/nb}
/IMAGE/{
getline;tot=nb=0;tot1=nb=0;tot2=nb=0;tot3=nb=0;tot4=nb=0;tot5=nb=0;x=$1}
$7>0 {
tot+=$7;tot1+=$5;tot2+=$8;tot3+=$3;tot4+=$9;tot5+=$10;nb++}
NF {
y=$1
}
/REFLECTIONS ACCEPTED FOR REFINEMENT/ {
	printf "	%3.1f\n", (100*$1)/$4
}
/UNABLE TO CARRY OUT REFINEMENT/ {
    	printf "	0\n"
}
'

	while [ 1 ]; do
		PID=$(ls | grep "INTEGRATE.HKL" | awk '{print $1}')
    		[ ! -n "$PID" ] && sleep 1 || break
	done

	inpfile=`wc -l XDS.INP | cut -c 1-3`
	head -n $inpfile XDS.INP > XDS.INP.009
	sed -i '/JOB= /d' XDS.INP.009
	echo "JOB= CORRECT" >> XDS.INP.009

	cp XDS.INP.009 XDS.INP
	xds_par > /dev/null &

	while [ 1 ]; do
 	   PID=$(ls | grep "CORRECT.LP" | awk '{print $1}')
  	  [ ! -n "$PID" ] && sleep 1 || break
	done

	# This checks for errors during the scaling step and stops the script, if errors found
	while [ CORRECT.tmp ]; do
 	   checkerror=`awk '/!!! ERROR/' CORRECT.LP`
 	   if [[ "$checkerror" ]]; then
  	      echo -e "\n*******************************************************************"
  	      echo -e "*** XDS encountered a serious error during scaling and stopped! ***"
  	      echo -e "*******************************************************************\n"
  	      echo -e "$checkerror\n"
  	      cat CORRECT.LP > error.log
  	      break
  	  fi
  	  PID=$(ls | grep "CORRECT.tmp" | awk '{print $1}')
  	  [ -n "$PID" ] && sleep 1 || break
	done

	if [ -e error.log ]; then
		exit
	elif [ ! -e error.log ]; then
		while [ 1 ]; do
	   		PID=$(ls | grep "XDS_ASCII.HKL" | awk '{print $1}')
	    		[ ! -n "$PID" ] && sleep 1 || break
		done
	fi

	echo -e "\
\n### NEW INTEGRATION STATISTICS ###\n
Image range processed:		$totaldataframes
ISa quality statistic:		$isa
Measured intensities:		$measuredrefs
Accepted intensities:		$acceptedrefs
Compared intensities:		$comparedtotal ($comparedouter)
Unique intensities:		$uniquerefs
Rejected intensities:		$rejectedrefs\n"

	if [[ $anom == "yes" ]]; then
		echo -e "\
Mean anom difference:		$siganototal ($siganoouter)
Mean anom correlation:		$anomcorrtotal ($anomcorrouter)
Friedel pairs:			$anompairstotal ($anompairsouter)\n"
	fi


	while [ 1 ]; do
	    PID=$(ls | grep "CORRECT.LP" | awk '{print $1}')
	    [ ! -n "$PID" ] && sleep 1 || break
	done

	correct_stats=`awk '/STATISTICS OF SAVED DATA SET/,/WILSON/' CORRECT.LP | grep -B 12 "total" | awk '/%/ { printf "%s	%s	%s	%s	%s	%s	%s	%s\n", $1,$5,$6,$9,$10,$11,$12,$13 }'`

	echo -e "Reso	Compl	R-fact	I/SigI	R-meas	CC(1/2)	AnoCorr	SigAno"  
	echo -e "--------------------------------------------------------------"

	resolution_estimate=`echo "$correct_stats" | sed '/total/d' | awk '$4>0&&$4>1.5 {printf "%s \n", $1}' | awk '{printf "%s,", $1}' | awk '{n=split($0,a,","); print a[n-1]}'`
	isigi=`echo "$correct_stats" | sed '/total/d' | awk '{printf "%s,", $4}' | awk '{n=split($0,a,","); print a[n-1]}'`

	echo -e "\
$correct_stats\n"
done
# fi


# This runs Pointless to simply convert XDS_ASCII.HKL to an MTZ file
pointless -copy xdsin XDS_ASCII.HKL hklout $xtal.indexed.mtz > POINTLESS.LP 2>/dev/null

while [ 1 ]; do
    PID=$(ls | grep "POINTLESS.LP" | awk '{print $1}')
    [ ! -n "$PID" ] && sleep 1 || break
done


exit
